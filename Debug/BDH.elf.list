
BDH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001310  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  0800144c  0800144c  0001144c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001460  08001460  00011460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001464  08001464  00011464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08001468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  2000001c  08001484  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000048  08001484  00020048  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000048c2  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000e94  00000000  00000000  00024907  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000590  00000000  00000000  000257a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004e8  00000000  00000000  00025d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001fd2  00000000  00000000  00026218  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001ecb  00000000  00000000  000281ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  0002a0b5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001664  00000000  00000000  0002a134  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002b798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000001c 	.word	0x2000001c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001434 	.word	0x08001434

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000020 	.word	0x20000020
 8000178:	08001434 	.word	0x08001434

0800017c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000184:	2300      	movs	r3, #0
 8000186:	73fb      	strb	r3, [r7, #15]
 8000188:	2300      	movs	r3, #0
 800018a:	73bb      	strb	r3, [r7, #14]
 800018c:	230f      	movs	r3, #15
 800018e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	78db      	ldrb	r3, [r3, #3]
 8000194:	2b00      	cmp	r3, #0
 8000196:	d038      	beq.n	800020a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000198:	4b26      	ldr	r3, [pc, #152]	; (8000234 <NVIC_Init+0xb8>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	43db      	mvns	r3, r3
 800019e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001a2:	0a1b      	lsrs	r3, r3, #8
 80001a4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	f1c3 0304 	rsb	r3, r3, #4
 80001ac:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001ae:	7b7a      	ldrb	r2, [r7, #13]
 80001b0:	7bfb      	ldrb	r3, [r7, #15]
 80001b2:	fa42 f303 	asr.w	r3, r2, r3
 80001b6:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	785b      	ldrb	r3, [r3, #1]
 80001bc:	461a      	mov	r2, r3
 80001be:	7bbb      	ldrb	r3, [r7, #14]
 80001c0:	fa02 f303 	lsl.w	r3, r2, r3
 80001c4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	789a      	ldrb	r2, [r3, #2]
 80001ca:	7b7b      	ldrb	r3, [r7, #13]
 80001cc:	4013      	ands	r3, r2
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	7bfb      	ldrb	r3, [r7, #15]
 80001d2:	4313      	orrs	r3, r2
 80001d4:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 80001d6:	7bfb      	ldrb	r3, [r7, #15]
 80001d8:	011b      	lsls	r3, r3, #4
 80001da:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001dc:	4a16      	ldr	r2, [pc, #88]	; (8000238 <NVIC_Init+0xbc>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	4413      	add	r3, r2
 80001e4:	7bfa      	ldrb	r2, [r7, #15]
 80001e6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ea:	4a13      	ldr	r2, [pc, #76]	; (8000238 <NVIC_Init+0xbc>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	095b      	lsrs	r3, r3, #5
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	f003 031f 	and.w	r3, r3, #31
 80001fe:	2101      	movs	r1, #1
 8000200:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000204:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000208:	e00f      	b.n	800022a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020a:	490b      	ldr	r1, [pc, #44]	; (8000238 <NVIC_Init+0xbc>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	095b      	lsrs	r3, r3, #5
 8000212:	b2db      	uxtb	r3, r3
 8000214:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	f003 031f 	and.w	r3, r3, #31
 800021e:	2201      	movs	r2, #1
 8000220:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000222:	f100 0320 	add.w	r3, r0, #32
 8000226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000ed00 	.word	0xe000ed00
 8000238:	e000e100 	.word	0xe000e100

0800023c <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800023c:	b480      	push	{r7}
 800023e:	b087      	sub	sp, #28
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
 8000244:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
 800024e:	2300      	movs	r3, #0
 8000250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000252:	2300      	movs	r3, #0
 8000254:	617b      	str	r3, [r7, #20]
 8000256:	e07e      	b.n	8000356 <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000258:	2201      	movs	r2, #1
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	fa02 f303 	lsl.w	r3, r2, r3
 8000260:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	693b      	ldr	r3, [r7, #16]
 8000268:	4013      	ands	r3, r2
 800026a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800026c:	68fa      	ldr	r2, [r7, #12]
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	429a      	cmp	r2, r3
 8000272:	d16d      	bne.n	8000350 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	2103      	movs	r1, #3
 800027e:	fa01 f303 	lsl.w	r3, r1, r3
 8000282:	43db      	mvns	r3, r3
 8000284:	401a      	ands	r2, r3
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	4619      	mov	r1, r3
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	fa01 f303 	lsl.w	r3, r1, r3
 800029c:	431a      	orrs	r2, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	791b      	ldrb	r3, [r3, #4]
 80002a6:	2b01      	cmp	r3, #1
 80002a8:	d003      	beq.n	80002b2 <GPIO_Init+0x76>
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	791b      	ldrb	r3, [r3, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	d136      	bne.n	8000320 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	689a      	ldr	r2, [r3, #8]
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	2103      	movs	r1, #3
 80002bc:	fa01 f303 	lsl.w	r3, r1, r3
 80002c0:	43db      	mvns	r3, r3
 80002c2:	401a      	ands	r2, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	689a      	ldr	r2, [r3, #8]
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	795b      	ldrb	r3, [r3, #5]
 80002d0:	4619      	mov	r1, r3
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	fa01 f303 	lsl.w	r3, r1, r3
 80002da:	431a      	orrs	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	889b      	ldrh	r3, [r3, #4]
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	2101      	movs	r1, #1
 80002ec:	fa01 f303 	lsl.w	r3, r1, r3
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	43db      	mvns	r3, r3
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	4013      	ands	r3, r2
 80002f8:	b29a      	uxth	r2, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	889b      	ldrh	r3, [r3, #4]
 8000302:	b29b      	uxth	r3, r3
 8000304:	b21a      	sxth	r2, r3
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	799b      	ldrb	r3, [r3, #6]
 800030a:	4619      	mov	r1, r3
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	b29b      	uxth	r3, r3
 8000310:	fa01 f303 	lsl.w	r3, r1, r3
 8000314:	b21b      	sxth	r3, r3
 8000316:	4313      	orrs	r3, r2
 8000318:	b21b      	sxth	r3, r3
 800031a:	b29a      	uxth	r2, r3
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	697b      	ldr	r3, [r7, #20]
 8000326:	b29b      	uxth	r3, r3
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	2103      	movs	r1, #3
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	68da      	ldr	r2, [r3, #12]
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	79db      	ldrb	r3, [r3, #7]
 8000340:	4619      	mov	r1, r3
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	005b      	lsls	r3, r3, #1
 8000346:	fa01 f303 	lsl.w	r3, r1, r3
 800034a:	431a      	orrs	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	3301      	adds	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	2b0f      	cmp	r3, #15
 800035a:	f67f af7d 	bls.w	8000258 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800035e:	bf00      	nop
 8000360:	371c      	adds	r7, #28
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
 8000370:	460b      	mov	r3, r1
 8000372:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	887a      	ldrh	r2, [r7, #2]
 8000378:	831a      	strh	r2, [r3, #24]
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	887a      	ldrh	r2, [r7, #2]
 8000394:	835a      	strh	r2, [r3, #26]
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	807b      	strh	r3, [r7, #2]
 80003ac:	4613      	mov	r3, r2
 80003ae:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80003b4:	2300      	movs	r3, #0
 80003b6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003b8:	787a      	ldrb	r2, [r7, #1]
 80003ba:	887b      	ldrh	r3, [r7, #2]
 80003bc:	f003 0307 	and.w	r3, r3, #7
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	fa02 f303 	lsl.w	r3, r2, r3
 80003c6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80003c8:	887b      	ldrh	r3, [r7, #2]
 80003ca:	08db      	lsrs	r3, r3, #3
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	4618      	mov	r0, r3
 80003d0:	887b      	ldrh	r3, [r7, #2]
 80003d2:	08db      	lsrs	r3, r3, #3
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	461a      	mov	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	3208      	adds	r2, #8
 80003dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003e0:	887b      	ldrh	r3, [r7, #2]
 80003e2:	f003 0307 	and.w	r3, r3, #7
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	210f      	movs	r1, #15
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	43db      	mvns	r3, r3
 80003f0:	ea02 0103 	and.w	r1, r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f100 0208 	add.w	r2, r0, #8
 80003fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80003fe:	887b      	ldrh	r3, [r7, #2]
 8000400:	08db      	lsrs	r3, r3, #3
 8000402:	b29b      	uxth	r3, r3
 8000404:	461a      	mov	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	3208      	adds	r2, #8
 800040a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	4313      	orrs	r3, r2
 8000412:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000414:	887b      	ldrh	r3, [r7, #2]
 8000416:	08db      	lsrs	r3, r3, #3
 8000418:	b29b      	uxth	r3, r3
 800041a:	461a      	mov	r2, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3208      	adds	r2, #8
 8000420:	68b9      	ldr	r1, [r7, #8]
 8000422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000426:	bf00      	nop
 8000428:	3714      	adds	r7, #20
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000430:	b480      	push	{r7}
 8000432:	b089      	sub	sp, #36	; 0x24
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, presc = 0, msirange = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	61fb      	str	r3, [r7, #28]
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	2300      	movs	r3, #0
 800044e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000450:	4b5f      	ldr	r3, [pc, #380]	; (80005d0 <RCC_GetClocksFreq+0x1a0>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	f003 030c 	and.w	r3, r3, #12
 8000458:	61fb      	str	r3, [r7, #28]
  
  switch (tmp)
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	2b0c      	cmp	r3, #12
 800045e:	d865      	bhi.n	800052c <RCC_GetClocksFreq+0xfc>
 8000460:	a201      	add	r2, pc, #4	; (adr r2, 8000468 <RCC_GetClocksFreq+0x38>)
 8000462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000466:	bf00      	nop
 8000468:	0800049d 	.word	0x0800049d
 800046c:	0800052d 	.word	0x0800052d
 8000470:	0800052d 	.word	0x0800052d
 8000474:	0800052d 	.word	0x0800052d
 8000478:	080004bd 	.word	0x080004bd
 800047c:	0800052d 	.word	0x0800052d
 8000480:	0800052d 	.word	0x0800052d
 8000484:	0800052d 	.word	0x0800052d
 8000488:	080004c5 	.word	0x080004c5
 800048c:	0800052d 	.word	0x0800052d
 8000490:	0800052d 	.word	0x0800052d
 8000494:	0800052d 	.word	0x0800052d
 8000498:	080004cd 	.word	0x080004cd
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 800049c:	4b4c      	ldr	r3, [pc, #304]	; (80005d0 <RCC_GetClocksFreq+0x1a0>)
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80004a4:	0b5b      	lsrs	r3, r3, #13
 80004a6:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	3301      	adds	r3, #1
 80004ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
 80004b4:	461a      	mov	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	601a      	str	r2, [r3, #0]
      break;
 80004ba:	e047      	b.n	800054c <RCC_GetClocksFreq+0x11c>
    case 0x04:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a45      	ldr	r2, [pc, #276]	; (80005d4 <RCC_GetClocksFreq+0x1a4>)
 80004c0:	601a      	str	r2, [r3, #0]
      break;
 80004c2:	e043      	b.n	800054c <RCC_GetClocksFreq+0x11c>
    case 0x08:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a44      	ldr	r2, [pc, #272]	; (80005d8 <RCC_GetClocksFreq+0x1a8>)
 80004c8:	601a      	str	r2, [r3, #0]
      break;
 80004ca:	e03f      	b.n	800054c <RCC_GetClocksFreq+0x11c>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80004cc:	4b40      	ldr	r3, [pc, #256]	; (80005d0 <RCC_GetClocksFreq+0x1a0>)
 80004ce:	689b      	ldr	r3, [r3, #8]
 80004d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80004d4:	61bb      	str	r3, [r7, #24]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80004d6:	4b3e      	ldr	r3, [pc, #248]	; (80005d0 <RCC_GetClocksFreq+0x1a0>)
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80004de:	617b      	str	r3, [r7, #20]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80004e0:	69bb      	ldr	r3, [r7, #24]
 80004e2:	0c9b      	lsrs	r3, r3, #18
 80004e4:	4a3d      	ldr	r2, [pc, #244]	; (80005dc <RCC_GetClocksFreq+0x1ac>)
 80004e6:	5cd3      	ldrb	r3, [r2, r3]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	61bb      	str	r3, [r7, #24]
      plldiv = (plldiv >> 22) + 1;
 80004ec:	697b      	ldr	r3, [r7, #20]
 80004ee:	0d9b      	lsrs	r3, r3, #22
 80004f0:	3301      	adds	r3, #1
 80004f2:	617b      	str	r3, [r7, #20]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80004f4:	4b36      	ldr	r3, [pc, #216]	; (80005d0 <RCC_GetClocksFreq+0x1a0>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004fc:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d109      	bne.n	8000518 <RCC_GetClocksFreq+0xe8>
      {
        /* HSI oscillator clock selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
 8000504:	69bb      	ldr	r3, [r7, #24]
 8000506:	4a33      	ldr	r2, [pc, #204]	; (80005d4 <RCC_GetClocksFreq+0x1a4>)
 8000508:	fb02 f203 	mul.w	r2, r2, r3
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	601a      	str	r2, [r3, #0]
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000516:	e019      	b.n	800054c <RCC_GetClocksFreq+0x11c>
        RCC_Clocks->SYSCLK_Frequency = (((HSI_VALUE) * pllmul) / plldiv);
      }
      else
      {
        /* HSE selected as PLL clock source */
        RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE) * pllmul) / plldiv);
 8000518:	69bb      	ldr	r3, [r7, #24]
 800051a:	4a2f      	ldr	r2, [pc, #188]	; (80005d8 <RCC_GetClocksFreq+0x1a8>)
 800051c:	fb02 f203 	mul.w	r2, r2, r3
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	fbb2 f2f3 	udiv	r2, r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	601a      	str	r2, [r3, #0]
      }
      break;
 800052a:	e00f      	b.n	800054c <RCC_GetClocksFreq+0x11c>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> 13;
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <RCC_GetClocksFreq+0x1a0>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000534:	0b5b      	lsrs	r3, r3, #13
 8000536:	60bb      	str	r3, [r7, #8]
      RCC_Clocks->SYSCLK_Frequency = (32768 * (1 << (msirange + 1)));
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	3301      	adds	r3, #1
 800053c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	461a      	mov	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	601a      	str	r2, [r3, #0]
      break;
 800054a:	bf00      	nop
  }
  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800054c:	4b20      	ldr	r3, [pc, #128]	; (80005d0 <RCC_GetClocksFreq+0x1a0>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000554:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 4;
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	091b      	lsrs	r3, r3, #4
 800055a:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp]; 
 800055c:	4a20      	ldr	r2, [pc, #128]	; (80005e0 <RCC_GetClocksFreq+0x1b0>)
 800055e:	69fb      	ldr	r3, [r7, #28]
 8000560:	4413      	add	r3, r2
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	40da      	lsrs	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <RCC_GetClocksFreq+0x1a0>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800057c:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 8;
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	0a1b      	lsrs	r3, r3, #8
 8000582:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 8000584:	4a16      	ldr	r2, [pc, #88]	; (80005e0 <RCC_GetClocksFreq+0x1b0>)
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	4413      	add	r3, r2
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	60fb      	str	r3, [r7, #12]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685a      	ldr	r2, [r3, #4]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	40da      	lsrs	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <RCC_GetClocksFreq+0x1a0>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80005a4:	61fb      	str	r3, [r7, #28]
  tmp = tmp >> 11;
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	0adb      	lsrs	r3, r3, #11
 80005aa:	61fb      	str	r3, [r7, #28]
  presc = APBAHBPrescTable[tmp];
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <RCC_GetClocksFreq+0x1b0>)
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	40da      	lsrs	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	60da      	str	r2, [r3, #12]
}
 80005c4:	bf00      	nop
 80005c6:	3724      	adds	r7, #36	; 0x24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800
 80005d4:	00f42400 	.word	0x00f42400
 80005d8:	007a1200 	.word	0x007a1200
 80005dc:	20000000 	.word	0x20000000
 80005e0:	2000000c 	.word	0x2000000c

080005e4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	460b      	mov	r3, r1
 80005ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d006      	beq.n	8000604 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80005f6:	4909      	ldr	r1, [pc, #36]	; (800061c <RCC_AHBPeriphClockCmd+0x38>)
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <RCC_AHBPeriphClockCmd+0x38>)
 80005fa:	69da      	ldr	r2, [r3, #28]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4313      	orrs	r3, r2
 8000600:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000602:	e006      	b.n	8000612 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000604:	4905      	ldr	r1, [pc, #20]	; (800061c <RCC_AHBPeriphClockCmd+0x38>)
 8000606:	4b05      	ldr	r3, [pc, #20]	; (800061c <RCC_AHBPeriphClockCmd+0x38>)
 8000608:	69da      	ldr	r2, [r3, #28]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	43db      	mvns	r3, r3
 800060e:	4013      	ands	r3, r2
 8000610:	61cb      	str	r3, [r1, #28]
  }
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	40023800 	.word	0x40023800

08000620 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	460b      	mov	r3, r1
 800062a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d006      	beq.n	8000640 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000632:	4909      	ldr	r1, [pc, #36]	; (8000658 <RCC_APB2PeriphClockCmd+0x38>)
 8000634:	4b08      	ldr	r3, [pc, #32]	; (8000658 <RCC_APB2PeriphClockCmd+0x38>)
 8000636:	6a1a      	ldr	r2, [r3, #32]
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4313      	orrs	r3, r2
 800063c:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800063e:	e006      	b.n	800064e <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000640:	4905      	ldr	r1, [pc, #20]	; (8000658 <RCC_APB2PeriphClockCmd+0x38>)
 8000642:	4b05      	ldr	r3, [pc, #20]	; (8000658 <RCC_APB2PeriphClockCmd+0x38>)
 8000644:	6a1a      	ldr	r2, [r3, #32]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	43db      	mvns	r3, r3
 800064a:	4013      	ands	r3, r2
 800064c:	620b      	str	r3, [r1, #32]
  }
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	40023800 	.word	0x40023800

0800065c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	460b      	mov	r3, r1
 8000666:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d006      	beq.n	800067c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800066e:	4909      	ldr	r1, [pc, #36]	; (8000694 <RCC_APB1PeriphClockCmd+0x38>)
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <RCC_APB1PeriphClockCmd+0x38>)
 8000672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4313      	orrs	r3, r2
 8000678:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800067a:	e006      	b.n	800068a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800067c:	4905      	ldr	r1, [pc, #20]	; (8000694 <RCC_APB1PeriphClockCmd+0x38>)
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <RCC_APB1PeriphClockCmd+0x38>)
 8000680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	43db      	mvns	r3, r3
 8000686:	4013      	ands	r3, r2
 8000688:	624b      	str	r3, [r1, #36]	; 0x24
  }
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40023800 	.word	0x40023800

08000698 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 80006ac:	89fb      	ldrh	r3, [r7, #14]
 80006ae:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 80006b2:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	881a      	ldrh	r2, [r3, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	885b      	ldrh	r3, [r3, #2]
 80006bc:	4313      	orrs	r3, r2
 80006be:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006cc:	4313      	orrs	r3, r2
 80006ce:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006d4:	4313      	orrs	r3, r2
 80006d6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006dc:	4313      	orrs	r3, r2
 80006de:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006e4:	4313      	orrs	r3, r2
 80006e6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	89fb      	ldrh	r3, [r7, #14]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	89fa      	ldrh	r2, [r7, #14]
 80006fa:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	8b9b      	ldrh	r3, [r3, #28]
 8000700:	b29b      	uxth	r3, r3
 8000702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000706:	b29a      	uxth	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	8a1a      	ldrh	r2, [r3, #16]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	821a      	strh	r2, [r3, #16]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop

08000720 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d008      	beq.n	8000744 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	b29b      	uxth	r3, r3
 8000738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800073c:	b29a      	uxth	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000742:	e007      	b.n	8000754 <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	b29b      	uxth	r3, r3
 800074a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800074e:	b29a      	uxth	r2, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	801a      	strh	r2, [r3, #0]
  }
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop

08000760 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3
  *         in SPI mode or 2 or 3 in I2S mode.
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	b29b      	uxth	r3, r3
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode.
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	887a      	ldrh	r2, [r7, #2]
 8000788:	819a      	strh	r2, [r3, #12]
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80007a0:	2300      	movs	r3, #0
 80007a2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	891b      	ldrh	r3, [r3, #8]
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	887b      	ldrh	r3, [r7, #2]
 80007ac:	4013      	ands	r3, r2
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d002      	beq.n	80007ba <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80007b4:	2301      	movs	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	e001      	b.n	80007be <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80007ba:	2300      	movs	r3, #0
 80007bc:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop

080007cc <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that 
  *        contains the configuration information for the specified USART peripheral.
  * @retval None.
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }
   
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	8a1b      	ldrh	r3, [r3, #16]
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	88db      	ldrh	r3, [r3, #6]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000804:	b29a      	uxth	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	899b      	ldrh	r3, [r3, #12]
 800080e:	b29b      	uxth	r3, r3
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000814:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000818:	f023 030c 	bic.w	r3, r3, #12
 800081c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	889a      	ldrh	r2, [r3, #4]
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	891b      	ldrh	r3, [r3, #8]
 8000826:	4313      	orrs	r3, r2
 8000828:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800082e:	4313      	orrs	r3, r2
 8000830:	b29b      	uxth	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000836:	4313      	orrs	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083c:	b29a      	uxth	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	8a9b      	ldrh	r3, [r3, #20]
 8000846:	b29b      	uxth	r3, r3
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000850:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	899b      	ldrh	r3, [r3, #12]
 8000856:	461a      	mov	r2, r3
 8000858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085a:	4313      	orrs	r3, r2
 800085c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	b29a      	uxth	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fde0 	bl	8000430 <RCC_GetClocksFreq>
  if (USARTx == USART1) 
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a2e      	ldr	r2, [pc, #184]	; (800092c <USART_Init+0x160>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d102      	bne.n	800087e <USART_Init+0xb2>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	623b      	str	r3, [r7, #32]
 800087c:	e001      	b.n	8000882 <USART_Init+0xb6>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	899b      	ldrh	r3, [r3, #12]
 8000886:	b29b      	uxth	r3, r3
 8000888:	b21b      	sxth	r3, r3
 800088a:	2b00      	cmp	r3, #0
 800088c:	da0c      	bge.n	80008a8 <USART_Init+0xdc>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800088e:	6a3a      	ldr	r2, [r7, #32]
 8000890:	4613      	mov	r3, r2
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	009a      	lsls	r2, r3, #2
 8000898:	441a      	add	r2, r3
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a4:	61fb      	str	r3, [r7, #28]
 80008a6:	e00b      	b.n	80008c0 <USART_Init+0xf4>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80008a8:	6a3a      	ldr	r2, [r7, #32]
 80008aa:	4613      	mov	r3, r2
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	009a      	lsls	r2, r3, #2
 80008b2:	441a      	add	r2, r3
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80008be:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80008c0:	69fb      	ldr	r3, [r7, #28]
 80008c2:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <USART_Init+0x164>)
 80008c4:	fba2 2303 	umull	r2, r3, r2, r3
 80008c8:	095b      	lsrs	r3, r3, #5
 80008ca:	011b      	lsls	r3, r3, #4
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	2264      	movs	r2, #100	; 0x64
 80008d4:	fb02 f303 	mul.w	r3, r2, r3
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	899b      	ldrh	r3, [r3, #12]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da0c      	bge.n	8000904 <USART_Init+0x138>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80008ea:	69bb      	ldr	r3, [r7, #24]
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	3332      	adds	r3, #50	; 0x32
 80008f0:	4a0f      	ldr	r2, [pc, #60]	; (8000930 <USART_Init+0x164>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	f003 0307 	and.w	r3, r3, #7
 80008fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008fe:	4313      	orrs	r3, r2
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
 8000902:	e00b      	b.n	800091c <USART_Init+0x150>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	3332      	adds	r3, #50	; 0x32
 800090a:	4a09      	ldr	r2, [pc, #36]	; (8000930 <USART_Init+0x164>)
 800090c:	fba2 2303 	umull	r2, r3, r2, r3
 8000910:	095b      	lsrs	r3, r3, #5
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000918:	4313      	orrs	r3, r2
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  }
 
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800091c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800091e:	b29a      	uxth	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	811a      	strh	r2, [r3, #8]
}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40013800 	.word	0x40013800
 8000930:	51eb851f 	.word	0x51eb851f

08000934 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d008      	beq.n	8000958 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	899b      	ldrh	r3, [r3, #12]
 800094a:	b29b      	uxth	r3, r3
 800094c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000950:	b29a      	uxth	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000956:	e007      	b.n	8000968 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	899b      	ldrh	r3, [r3, #12]
 800095c:	b29b      	uxth	r3, r3
 800095e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000962:	b29a      	uxth	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	819a      	strh	r2, [r3, #12]
  }
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop

08000974 <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None.
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000980:	887b      	ldrh	r3, [r7, #2]
 8000982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000986:	b29a      	uxth	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	809a      	strh	r2, [r3, #4]
}
 800098c:	bf00      	nop
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop

08000998 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000998:	b480      	push	{r7}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	807b      	strh	r3, [r7, #2]
 80009a4:	4613      	mov	r3, r2
 80009a6:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80009bc:	887b      	ldrh	r3, [r7, #2]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	095b      	lsrs	r3, r3, #5
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80009c6:	887b      	ldrh	r3, [r7, #2]
 80009c8:	f003 031f 	and.w	r3, r3, #31
 80009cc:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80009ce:	2201      	movs	r2, #1
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d103      	bne.n	80009e6 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	330c      	adds	r3, #12
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e009      	b.n	80009fa <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d103      	bne.n	80009f4 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	3310      	adds	r3, #16
 80009f0:	617b      	str	r3, [r7, #20]
 80009f2:	e002      	b.n	80009fa <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	3314      	adds	r3, #20
 80009f8:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80009fa:	787b      	ldrb	r3, [r7, #1]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d006      	beq.n	8000a0e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	6811      	ldr	r1, [r2, #0]
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000a0c:	e006      	b.n	8000a1c <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	6811      	ldr	r1, [r2, #0]
 8000a14:	68ba      	ldr	r2, [r7, #8]
 8000a16:	43d2      	mvns	r2, r2
 8000a18:	400a      	ands	r2, r1
 8000a1a:	601a      	str	r2, [r3, #0]
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	371c      	adds	r7, #28
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000a44:	887b      	ldrh	r3, [r7, #2]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	095b      	lsrs	r3, r3, #5
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000a4e:	887b      	ldrh	r3, [r7, #2]
 8000a50:	f003 031f 	and.w	r3, r3, #31
 8000a54:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000a56:	2201      	movs	r2, #1
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d107      	bne.n	8000a76 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	899b      	ldrh	r3, [r3, #12]
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	4013      	ands	r3, r2
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	e011      	b.n	8000a9a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d107      	bne.n	8000a8c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	8a1b      	ldrh	r3, [r3, #16]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	461a      	mov	r2, r3
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	4013      	ands	r3, r2
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	e006      	b.n	8000a9a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	8a9b      	ldrh	r3, [r3, #20]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	4013      	ands	r3, r2
 8000a98:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8000a9a:	887b      	ldrh	r3, [r7, #2]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d005      	beq.n	8000acc <USART_GetITStatus+0xa4>
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	74fb      	strb	r3, [r7, #19]
 8000aca:	e001      	b.n	8000ad0 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000ad0:	7cfb      	ldrb	r3, [r7, #19]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	371c      	adds	r7, #28
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <USART_ClearITPendingBit>:
  * @note TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	81fb      	strh	r3, [r7, #14]
 8000aec:	2300      	movs	r3, #0
 8000aee:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8000af0:	887b      	ldrh	r3, [r7, #2]
 8000af2:	0a1b      	lsrs	r3, r3, #8
 8000af4:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8000af6:	89fb      	ldrh	r3, [r7, #14]
 8000af8:	2201      	movs	r2, #1
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8000b00:	89bb      	ldrh	r3, [r7, #12]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	801a      	strh	r2, [r3, #0]
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <main>:
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	; 0x50
 8000b18:	af02      	add	r7, sp, #8
  int i = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	647b      	str	r3, [r7, #68]	; 0x44
  int interval = 10;
 8000b1e:	230a      	movs	r3, #10
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  int x = 0, y = 0, z = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]

  uint16_t x_t = 0, y_t = 0, z_t = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	837b      	strh	r3, [r7, #26]
 8000b32:	2300      	movs	r3, #0
 8000b34:	833b      	strh	r3, [r7, #24]
 8000b36:	2300      	movs	r3, #0
 8000b38:	82fb      	strh	r3, [r7, #22]
  int x_old = 0, y_old = 0, z_old = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
  int x_max = 0, y_max = 0, z_max = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	643b      	str	r3, [r7, #64]	; 0x40
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b4e:	2300      	movs	r3, #0
 8000b50:	63bb      	str	r3, [r7, #56]	; 0x38
  int x_min = 0, y_min = 0, z_min = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	637b      	str	r3, [r7, #52]	; 0x34
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	; 0x30
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int threshold;

  init_SPI1();
 8000b5e:	f000 f937 	bl	8000dd0 <init_SPI1>
  usart_init();
 8000b62:	f000 f885 	bl	8000c70 <usart_init>

  mySPI_SendData(0x20,0x67); //LIS3DH nastavenie akcelerometra na citanie
 8000b66:	2167      	movs	r1, #103	; 0x67
 8000b68:	2020      	movs	r0, #32
 8000b6a:	f000 f9e1 	bl	8000f30 <mySPI_SendData>

//  	do{
  x_t = tahajSPIdata(0x29);	//X_high 29
 8000b6e:	2029      	movs	r0, #41	; 0x29
 8000b70:	f000 f994 	bl	8000e9c <tahajSPIdata>
 8000b74:	4603      	mov	r3, r0
 8000b76:	837b      	strh	r3, [r7, #26]
  y_t = tahajSPIdata(0x2B);	//Y_high 2B
 8000b78:	202b      	movs	r0, #43	; 0x2b
 8000b7a:	f000 f98f 	bl	8000e9c <tahajSPIdata>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	833b      	strh	r3, [r7, #24]
  z_t = tahajSPIdata(0x2D);	//Z_high 2D
 8000b82:	202d      	movs	r0, #45	; 0x2d
 8000b84:	f000 f98a 	bl	8000e9c <tahajSPIdata>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	82fb      	strh	r3, [r7, #22]

  x = x_min = x_max = x_old = x_t;
 8000b8c:	8b7b      	ldrh	r3, [r7, #26]
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	643b      	str	r3, [r7, #64]	; 0x40
 8000b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
 8000b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  y = y_min = y_max = y_old = y_t;
 8000b9c:	8b3b      	ldrh	r3, [r7, #24]
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
 8000ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000baa:	623b      	str	r3, [r7, #32]
  z = z_min = y_max = z_old =  z_t;
 8000bac:	8afb      	ldrh	r3, [r7, #22]
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bba:	61fb      	str	r3, [r7, #28]

  //delay(100);
//  	} while(x != 0 && y != 0 && z != 0);

  while (1){
	  x_t = tahajSPIdata(0x29);	//X_high 29
 8000bbc:	2029      	movs	r0, #41	; 0x29
 8000bbe:	f000 f96d 	bl	8000e9c <tahajSPIdata>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	837b      	strh	r3, [r7, #26]
	  y_t = tahajSPIdata(0x2B);	//Y_high, 2B
 8000bc6:	202b      	movs	r0, #43	; 0x2b
 8000bc8:	f000 f968 	bl	8000e9c <tahajSPIdata>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	833b      	strh	r3, [r7, #24]
	  z_t = tahajSPIdata(0x2D);	//Z_high 2D
 8000bd0:	202d      	movs	r0, #45	; 0x2d
 8000bd2:	f000 f963 	bl	8000e9c <tahajSPIdata>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	82fb      	strh	r3, [r7, #22]

	  x = (int)x_t;
 8000bda:	8b7b      	ldrh	r3, [r7, #26]
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
	  y = (int)y_t;
 8000bde:	8b3b      	ldrh	r3, [r7, #24]
 8000be0:	623b      	str	r3, [r7, #32]
	  z = (int)z_t;
 8000be2:	8afb      	ldrh	r3, [r7, #22]
 8000be4:	61fb      	str	r3, [r7, #28]
//
//	  	if(z < z_old - interval || z > z_old + interval){
//	  		z = z_old;
//	  	}

	  	if(x > x_max){
 8000be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bea:	429a      	cmp	r2, r3
 8000bec:	dd01      	ble.n	8000bf2 <main+0xde>
	  	  		x_max = x;
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	643b      	str	r3, [r7, #64]	; 0x40
	  	  	}

	  	if(y > y_max){
 8000bf2:	6a3a      	ldr	r2, [r7, #32]
 8000bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	dd01      	ble.n	8000bfe <main+0xea>
	  	  		y_max = y;
 8000bfa:	6a3b      	ldr	r3, [r7, #32]
 8000bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
	  	  	}

	  	if(z > z_max){
 8000bfe:	69fa      	ldr	r2, [r7, #28]
 8000c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dd01      	ble.n	8000c0a <main+0xf6>
	  	  		z_max = z;
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	63bb      	str	r3, [r7, #56]	; 0x38
	  	  	}

	  	if(x < x_min){
 8000c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	da01      	bge.n	8000c16 <main+0x102>
	  	  		x_min = x;
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
	  	  	}

	  	if(y < y_min){
 8000c16:	6a3a      	ldr	r2, [r7, #32]
 8000c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	da01      	bge.n	8000c22 <main+0x10e>
	  	  		y_min = y;
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
	  	  	}

	  	if(z < z_min){
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c26:	429a      	cmp	r2, r3
 8000c28:	da01      	bge.n	8000c2e <main+0x11a>
	  	  		z_min = z;
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  	  	}

	  threshold = (x_max / x_min)/2;
 8000c2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c32:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c36:	0fda      	lsrs	r2, r3, #31
 8000c38:	4413      	add	r3, r2
 8000c3a:	105b      	asrs	r3, r3, #1
 8000c3c:	607b      	str	r3, [r7, #4]

	  sprintf(send,"%d     %d      %d\r\n", x,y,z);
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	6a3b      	ldr	r3, [r7, #32]
 8000c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <main+0x154>)
 8000c48:	4808      	ldr	r0, [pc, #32]	; (8000c6c <main+0x158>)
 8000c4a:	f000 fbb7 	bl	80013bc <siprintf>
	  USARTp_start(send);
 8000c4e:	4807      	ldr	r0, [pc, #28]	; (8000c6c <main+0x158>)
 8000c50:	f000 f866 	bl	8000d20 <USARTp_start>

	  x_old = x;
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	613b      	str	r3, [r7, #16]
	  y_old = y;
 8000c58:	6a3b      	ldr	r3, [r7, #32]
 8000c5a:	60fb      	str	r3, [r7, #12]
	  z_old = z;
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	60bb      	str	r3, [r7, #8]

	  i++;
 8000c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c62:	3301      	adds	r3, #1
 8000c64:	647b      	str	r3, [r7, #68]	; 0x44
  }
 8000c66:	e7a9      	b.n	8000bbc <main+0xa8>
 8000c68:	0800144c 	.word	0x0800144c
 8000c6c:	2000003c 	.word	0x2000003c

08000c70 <usart_init>:
 *      Author: Patrik
 */

#include "header.h"

void usart_init() {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000c76:	2101      	movs	r1, #1
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fcb3 	bl	80005e4 <RCC_AHBPeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000c7e:	2101      	movs	r1, #1
 8000c80:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c84:	f7ff fcea 	bl	800065c <RCC_APB1PeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8000c88:	2207      	movs	r2, #7
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4822      	ldr	r0, [pc, #136]	; (8000d18 <usart_init+0xa8>)
 8000c8e:	f7ff fb87 	bl	80003a0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8000c92:	2207      	movs	r2, #7
 8000c94:	2103      	movs	r1, #3
 8000c96:	4820      	ldr	r0, [pc, #128]	; (8000d18 <usart_init+0xa8>)
 8000c98:	f7ff fb82 	bl	80003a0 <GPIO_PinAFConfig>

	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	//NOPULL or UP
 8000ca8:	2300      	movs	r3, #0
 8000caa:	77fb      	strb	r3, [r7, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8000cac:	2303      	movs	r3, #3
 8000cae:	777b      	strb	r3, [r7, #29]
	GPIO_Init(GPIOA,&GPIO_InitStructure);
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4818      	ldr	r0, [pc, #96]	; (8000d18 <usart_init+0xa8>)
 8000cb8:	f7ff fac0 	bl	800023c <GPIO_Init>

	USART_InitTypeDef USART_InitStructure;

	USART_InitStructure.USART_BaudRate = 9600*2; //115200;
 8000cbc:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8000cc0:	60bb      	str	r3, [r7, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	81bb      	strh	r3, [r7, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	81fb      	strh	r3, [r7, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	823b      	strh	r3, [r7, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	82bb      	strh	r3, [r7, #20]
	USART_InitStructure.USART_Mode = /*USART_Mode_Rx | */USART_Mode_Tx;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	827b      	strh	r3, [r7, #18]
	USART_Init(USART2, &USART_InitStructure);
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480f      	ldr	r0, [pc, #60]	; (8000d1c <usart_init+0xac>)
 8000cde:	f7ff fd75 	bl	80007cc <USART_Init>

	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000ce2:	2326      	movs	r3, #38	; 0x26
 8000ce4:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff fa41 	bl	800017c <NVIC_Init>

	USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f240 6126 	movw	r1, #1574	; 0x626
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <usart_init+0xac>)
 8000d02:	f7ff fe49 	bl	8000998 <USART_ITConfig>
	USART_Cmd(USART2, ENABLE);
 8000d06:	2101      	movs	r1, #1
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <usart_init+0xac>)
 8000d0a:	f7ff fe13 	bl	8000934 <USART_Cmd>
}
 8000d0e:	bf00      	nop
 8000d10:	3720      	adds	r7, #32
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40004400 	.word	0x40004400

08000d20 <USARTp_start>:

void USARTp_start(char send[]){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	if (j == 0){
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <USARTp_start+0x38>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d10f      	bne.n	8000d50 <USARTp_start+0x30>
		USART_SendData(USART2,send[j]);
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <USARTp_start+0x38>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4806      	ldr	r0, [pc, #24]	; (8000d5c <USARTp_start+0x3c>)
 8000d42:	f7ff fe17 	bl	8000974 <USART_SendData>
		j++;
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <USARTp_start+0x38>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	4a02      	ldr	r2, [pc, #8]	; (8000d58 <USARTp_start+0x38>)
 8000d4e:	6013      	str	r3, [r2, #0]
	}
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000038 	.word	0x20000038
 8000d5c:	40004400 	.word	0x40004400

08000d60 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART2, USART_IT_TC) != RESET){
 8000d64:	f240 6126 	movw	r1, #1574	; 0x626
 8000d68:	4816      	ldr	r0, [pc, #88]	; (8000dc4 <USART2_IRQHandler+0x64>)
 8000d6a:	f7ff fe5d 	bl	8000a28 <USART_GetITStatus>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d024      	beq.n	8000dbe <USART2_IRQHandler+0x5e>
		USART_ClearITPendingBit(USART2, USART_IT_TC);
 8000d74:	f240 6126 	movw	r1, #1574	; 0x626
 8000d78:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <USART2_IRQHandler+0x64>)
 8000d7a:	f7ff feaf 	bl	8000adc <USART_ClearITPendingBit>
		if (j > 0){
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <USART2_IRQHandler+0x68>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	dd1b      	ble.n	8000dbe <USART2_IRQHandler+0x5e>
			if(send[j] != '\0'){
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <USART2_IRQHandler+0x68>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <USART2_IRQHandler+0x6c>)
 8000d8c:	5cd3      	ldrb	r3, [r2, r3]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d00e      	beq.n	8000db0 <USART2_IRQHandler+0x50>
				USART_SendData(USART2,send[j]);
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <USART2_IRQHandler+0x68>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <USART2_IRQHandler+0x6c>)
 8000d98:	5cd3      	ldrb	r3, [r2, r3]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4809      	ldr	r0, [pc, #36]	; (8000dc4 <USART2_IRQHandler+0x64>)
 8000da0:	f7ff fde8 	bl	8000974 <USART_SendData>
				j++;
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <USART2_IRQHandler+0x68>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <USART2_IRQHandler+0x68>)
 8000dac:	6013      	str	r3, [r2, #0]
				USART_SendData(USART2,'\r');
				j = 0;
			}
		}
	}
}
 8000dae:	e006      	b.n	8000dbe <USART2_IRQHandler+0x5e>
		if (j > 0){
			if(send[j] != '\0'){
				USART_SendData(USART2,send[j]);
				j++;
			}else{
				USART_SendData(USART2,'\r');
 8000db0:	210d      	movs	r1, #13
 8000db2:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <USART2_IRQHandler+0x64>)
 8000db4:	f7ff fdde 	bl	8000974 <USART_SendData>
				j = 0;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <USART2_IRQHandler+0x68>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40004400 	.word	0x40004400
 8000dc8:	20000038 	.word	0x20000038
 8000dcc:	2000003c 	.word	0x2000003c

08000dd0 <init_SPI1>:





void init_SPI1(void){
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1,ENABLE);
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ddc:	f7ff fc20 	bl	8000620 <RCC_APB2PeriphClockCmd>

	SPI_InitTypeDef SPI_InitStructure;

	SPI_InitStructure.SPI_BaudRatePrescaler=SPI_BaudRatePrescaler_2;
 8000de0:	2300      	movs	r3, #0
 8000de2:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_CPHA=SPI_CPHA_2Edge;
 8000de4:	2301      	movs	r3, #1
 8000de6:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_CPOL=SPI_CPOL_High;
 8000de8:	2302      	movs	r3, #2
 8000dea:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_Direction=SPI_Direction_2Lines_FullDuplex;
 8000dec:	2300      	movs	r3, #0
 8000dee:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_DataSize=SPI_DataSize_8b;
 8000df0:	2300      	movs	r3, #0
 8000df2:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CRCPolynomial = SPI_CRC_Rx;
 8000df4:	2301      	movs	r3, #1
 8000df6:	83bb      	strh	r3, [r7, #28]
	SPI_InitStructure.SPI_FirstBit=SPI_FirstBit_MSB;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_Mode=SPI_Mode_Master;
 8000dfc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e00:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft| SPI_NSSInternalSoft_Set;
 8000e02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e06:	82fb      	strh	r3, [r7, #22]
	SPI_Init(SPI1,&SPI_InitStructure);
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4820      	ldr	r0, [pc, #128]	; (8000e90 <init_SPI1+0xc0>)
 8000e10:	f7ff fc42 	bl	8000698 <SPI_Init>

	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA|RCC_AHBPeriph_GPIOB,ENABLE);
 8000e14:	2101      	movs	r1, #1
 8000e16:	2003      	movs	r0, #3
 8000e18:	f7ff fbe4 	bl	80005e4 <RCC_AHBPeriphClockCmd>
	GPIO_InitTypeDef gpioInitStruc;

	gpioInitStruc.GPIO_Mode = GPIO_Mode_AF;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	723b      	strb	r3, [r7, #8]
	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 8000e20:	2300      	movs	r3, #0
 8000e22:	72bb      	strb	r3, [r7, #10]
	gpioInitStruc.GPIO_Speed=GPIO_Speed_40MHz;
 8000e24:	2303      	movs	r3, #3
 8000e26:	727b      	strb	r3, [r7, #9]
	gpioInitStruc.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	72fb      	strb	r3, [r7, #11]
	gpioInitStruc.GPIO_Pin = GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;
 8000e2c:	23e0      	movs	r3, #224	; 0xe0
 8000e2e:	607b      	str	r3, [r7, #4]
	GPIO_Init(GPIOA,&gpioInitStruc);
 8000e30:	1d3b      	adds	r3, r7, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	4817      	ldr	r0, [pc, #92]	; (8000e94 <init_SPI1+0xc4>)
 8000e36:	f7ff fa01 	bl	800023c <GPIO_Init>

	gpioInitStruc.GPIO_OType = GPIO_OType_PP;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	72bb      	strb	r3, [r7, #10]
	gpioInitStruc.GPIO_Speed = GPIO_Speed_40MHz;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	727b      	strb	r3, [r7, #9]
	gpioInitStruc.GPIO_PuPd = GPIO_PuPd_UP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	72fb      	strb	r3, [r7, #11]
	gpioInitStruc.GPIO_Pin = GPIO_Pin_6;
 8000e46:	2340      	movs	r3, #64	; 0x40
 8000e48:	607b      	str	r3, [r7, #4]
	gpioInitStruc.GPIO_Mode = GPIO_Mode_OUT;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(GPIOB, &gpioInitStruc);
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4811      	ldr	r0, [pc, #68]	; (8000e98 <init_SPI1+0xc8>)
 8000e54:	f7ff f9f2 	bl	800023c <GPIO_Init>

	GPIO_PinAFConfig(GPIOA,GPIO_PinSource5,GPIO_AF_SPI1);
 8000e58:	2205      	movs	r2, #5
 8000e5a:	2105      	movs	r1, #5
 8000e5c:	480d      	ldr	r0, [pc, #52]	; (8000e94 <init_SPI1+0xc4>)
 8000e5e:	f7ff fa9f 	bl	80003a0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource6,GPIO_AF_SPI1);
 8000e62:	2205      	movs	r2, #5
 8000e64:	2106      	movs	r1, #6
 8000e66:	480b      	ldr	r0, [pc, #44]	; (8000e94 <init_SPI1+0xc4>)
 8000e68:	f7ff fa9a 	bl	80003a0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA,GPIO_PinSource7,GPIO_AF_SPI1);
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	2107      	movs	r1, #7
 8000e70:	4808      	ldr	r0, [pc, #32]	; (8000e94 <init_SPI1+0xc4>)
 8000e72:	f7ff fa95 	bl	80003a0 <GPIO_PinAFConfig>

	GPIO_SetBits(GPIOB, GPIO_Pin_6);
 8000e76:	2140      	movs	r1, #64	; 0x40
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <init_SPI1+0xc8>)
 8000e7a:	f7ff fa75 	bl	8000368 <GPIO_SetBits>
	SPI_Cmd(SPI1, ENABLE);
 8000e7e:	2101      	movs	r1, #1
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <init_SPI1+0xc0>)
 8000e82:	f7ff fc4d 	bl	8000720 <SPI_Cmd>
}
 8000e86:	bf00      	nop
 8000e88:	3720      	adds	r7, #32
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40013000 	.word	0x40013000
 8000e94:	40020000 	.word	0x40020000
 8000e98:	40020400 	.word	0x40020400

08000e9c <tahajSPIdata>:

	return rxData;
}


uint16_t tahajSPIdata(uint8_t adress){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]

	GPIO_ResetBits(GPIOB,GPIO_Pin_6);
 8000ea6:	2140      	movs	r1, #64	; 0x40
 8000ea8:	481f      	ldr	r0, [pc, #124]	; (8000f28 <tahajSPIdata+0x8c>)
 8000eaa:	f7ff fa6b 	bl	8000384 <GPIO_ResetBits>
	adress = 0x80| adress;
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eb4:	71fb      	strb	r3, [r7, #7]
	while (!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 8000eb6:	bf00      	nop
 8000eb8:	2102      	movs	r1, #2
 8000eba:	481c      	ldr	r0, [pc, #112]	; (8000f2c <tahajSPIdata+0x90>)
 8000ebc:	f7ff fc6a 	bl	8000794 <SPI_I2S_GetFlagStatus>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f8      	beq.n	8000eb8 <tahajSPIdata+0x1c>
	SPI_I2S_SendData(SPI1, adress);
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4817      	ldr	r0, [pc, #92]	; (8000f2c <tahajSPIdata+0x90>)
 8000ece:	f7ff fc53 	bl	8000778 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
 8000ed2:	bf00      	nop
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4815      	ldr	r0, [pc, #84]	; (8000f2c <tahajSPIdata+0x90>)
 8000ed8:	f7ff fc5c 	bl	8000794 <SPI_I2S_GetFlagStatus>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f8      	beq.n	8000ed4 <tahajSPIdata+0x38>
	SPI_I2S_ReceiveData(SPI1); //Clear RXNE bit
 8000ee2:	4812      	ldr	r0, [pc, #72]	; (8000f2c <tahajSPIdata+0x90>)
 8000ee4:	f7ff fc3c 	bl	8000760 <SPI_I2S_ReceiveData>

	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 8000ee8:	bf00      	nop
 8000eea:	2102      	movs	r1, #2
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <tahajSPIdata+0x90>)
 8000eee:	f7ff fc51 	bl	8000794 <SPI_I2S_GetFlagStatus>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d0f8      	beq.n	8000eea <tahajSPIdata+0x4e>
	SPI_I2S_SendData(SPI1, 0x00); //Dummy byte to generate clock
 8000ef8:	2100      	movs	r1, #0
 8000efa:	480c      	ldr	r0, [pc, #48]	; (8000f2c <tahajSPIdata+0x90>)
 8000efc:	f7ff fc3c 	bl	8000778 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
 8000f00:	bf00      	nop
 8000f02:	2101      	movs	r1, #1
 8000f04:	4809      	ldr	r0, [pc, #36]	; (8000f2c <tahajSPIdata+0x90>)
 8000f06:	f7ff fc45 	bl	8000794 <SPI_I2S_GetFlagStatus>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f8      	beq.n	8000f02 <tahajSPIdata+0x66>
	GPIO_SetBits(GPIOB,GPIO_Pin_6);
 8000f10:	2140      	movs	r1, #64	; 0x40
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <tahajSPIdata+0x8c>)
 8000f14:	f7ff fa28 	bl	8000368 <GPIO_SetBits>

	return SPI_I2S_ReceiveData(SPI1);
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <tahajSPIdata+0x90>)
 8000f1a:	f7ff fc21 	bl	8000760 <SPI_I2S_ReceiveData>
 8000f1e:	4603      	mov	r3, r0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40013000 	.word	0x40013000

08000f30 <mySPI_SendData>:

void mySPI_SendData(uint8_t adress, uint8_t data){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	71bb      	strb	r3, [r7, #6]

	GPIO_ResetBits(GPIOB, GPIO_Pin_6);
 8000f40:	2140      	movs	r1, #64	; 0x40
 8000f42:	481e      	ldr	r0, [pc, #120]	; (8000fbc <mySPI_SendData+0x8c>)
 8000f44:	f7ff fa1e 	bl	8000384 <GPIO_ResetBits>

	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 8000f48:	bf00      	nop
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	481c      	ldr	r0, [pc, #112]	; (8000fc0 <mySPI_SendData+0x90>)
 8000f4e:	f7ff fc21 	bl	8000794 <SPI_I2S_GetFlagStatus>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0f8      	beq.n	8000f4a <mySPI_SendData+0x1a>
	SPI_I2S_SendData(SPI1, adress);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4818      	ldr	r0, [pc, #96]	; (8000fc0 <mySPI_SendData+0x90>)
 8000f60:	f7ff fc0a 	bl	8000778 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
 8000f64:	bf00      	nop
 8000f66:	2101      	movs	r1, #1
 8000f68:	4815      	ldr	r0, [pc, #84]	; (8000fc0 <mySPI_SendData+0x90>)
 8000f6a:	f7ff fc13 	bl	8000794 <SPI_I2S_GetFlagStatus>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d0f8      	beq.n	8000f66 <mySPI_SendData+0x36>
	SPI_I2S_ReceiveData(SPI1);
 8000f74:	4812      	ldr	r0, [pc, #72]	; (8000fc0 <mySPI_SendData+0x90>)
 8000f76:	f7ff fbf3 	bl	8000760 <SPI_I2S_ReceiveData>

	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE));
 8000f7a:	bf00      	nop
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <mySPI_SendData+0x90>)
 8000f80:	f7ff fc08 	bl	8000794 <SPI_I2S_GetFlagStatus>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f8      	beq.n	8000f7c <mySPI_SendData+0x4c>
	SPI_I2S_SendData(SPI1, data);
 8000f8a:	79bb      	ldrb	r3, [r7, #6]
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480b      	ldr	r0, [pc, #44]	; (8000fc0 <mySPI_SendData+0x90>)
 8000f92:	f7ff fbf1 	bl	8000778 <SPI_I2S_SendData>
	while(!SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE));
 8000f96:	bf00      	nop
 8000f98:	2101      	movs	r1, #1
 8000f9a:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <mySPI_SendData+0x90>)
 8000f9c:	f7ff fbfa 	bl	8000794 <SPI_I2S_GetFlagStatus>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f8      	beq.n	8000f98 <mySPI_SendData+0x68>
	SPI_I2S_ReceiveData(SPI1);
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <mySPI_SendData+0x90>)
 8000fa8:	f7ff fbda 	bl	8000760 <SPI_I2S_ReceiveData>

	GPIO_SetBits(GPIOB, GPIO_Pin_6);
 8000fac:	2140      	movs	r1, #64	; 0x40
 8000fae:	4803      	ldr	r0, [pc, #12]	; (8000fbc <mySPI_SendData+0x8c>)
 8000fb0:	f7ff f9da 	bl	8000368 <GPIO_SetBits>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	40013000 	.word	0x40013000

08000fc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ffc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000fc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000fca:	e003      	b.n	8000fd4 <LoopCopyDataInit>

08000fcc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000fce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000fd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000fd2:	3104      	adds	r1, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000fd4:	480b      	ldr	r0, [pc, #44]	; (8001004 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000fd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000fda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000fdc:	d3f6      	bcc.n	8000fcc <CopyDataInit>
  ldr r2, =_sbss
 8000fde:	4a0b      	ldr	r2, [pc, #44]	; (800100c <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000fe0:	e002      	b.n	8000fe8 <LoopFillZerobss>

08000fe2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000fe4:	f842 3b04 	str.w	r3, [r2], #4

08000fe8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000fe8:	4b09      	ldr	r3, [pc, #36]	; (8001010 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000fea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000fec:	d3f9      	bcc.n	8000fe2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fee:	f000 f841 	bl	8001074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f000 f9f9 	bl	80013e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ff6:	f7ff fd8d 	bl	8000b14 <main>
  bx lr
 8000ffa:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ffc:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001000:	08001468 	.word	0x08001468
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001008:	2000001c 	.word	0x2000001c
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800100c:	2000001c 	.word	0x2000001c
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001010:	20000048 	.word	0x20000048

08001014 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC1_IRQHandler>
	...

08001018 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001028:	e7fe      	b.n	8001028 <HardFault_Handler+0x4>
 800102a:	bf00      	nop

0800102c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>
 8001032:	bf00      	nop

08001034 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001038:	e7fe      	b.n	8001038 <BusFault_Handler+0x4>
 800103a:	bf00      	nop

0800103c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>
 8001042:	bf00      	nop

08001044 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001078:	4a15      	ldr	r2, [pc, #84]	; (80010d0 <SystemInit+0x5c>)
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <SystemInit+0x5c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001082:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001084:	4912      	ldr	r1, [pc, #72]	; (80010d0 <SystemInit+0x5c>)
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <SystemInit+0x5c>)
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <SystemInit+0x60>)
 800108c:	4013      	ands	r3, r2
 800108e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001090:	4a0f      	ldr	r2, [pc, #60]	; (80010d0 <SystemInit+0x5c>)
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <SystemInit+0x5c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800109a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800109e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80010a0:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <SystemInit+0x5c>)
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <SystemInit+0x5c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010aa:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80010ac:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <SystemInit+0x5c>)
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <SystemInit+0x5c>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80010b6:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SystemInit+0x5c>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80010be:	f000 f80d 	bl	80010dc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SystemInit+0x64>)
 80010c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c8:	609a      	str	r2, [r3, #8]
#endif
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	88ffc00c 	.word	0x88ffc00c
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80010ea:	4a41      	ldr	r2, [pc, #260]	; (80011f0 <SetSysClock+0x114>)
 80010ec:	4b40      	ldr	r3, [pc, #256]	; (80011f0 <SetSysClock+0x114>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80010f6:	4b3e      	ldr	r3, [pc, #248]	; (80011f0 <SetSysClock+0x114>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fe:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3301      	adds	r3, #1
 8001104:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d103      	bne.n	8001114 <SetSysClock+0x38>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001112:	d1f0      	bne.n	80010f6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001114:	4b36      	ldr	r3, [pc, #216]	; (80011f0 <SetSysClock+0x114>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d002      	beq.n	8001126 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001120:	2301      	movs	r3, #1
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	e001      	b.n	800112a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d15a      	bne.n	80011e6 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001130:	4a30      	ldr	r2, [pc, #192]	; (80011f4 <SetSysClock+0x118>)
 8001132:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <SetSysClock+0x118>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 800113c:	4a2d      	ldr	r2, [pc, #180]	; (80011f4 <SetSysClock+0x118>)
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <SetSysClock+0x118>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f043 0302 	orr.w	r3, r3, #2
 8001146:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001148:	4a2a      	ldr	r2, [pc, #168]	; (80011f4 <SetSysClock+0x118>)
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <SetSysClock+0x118>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001154:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <SetSysClock+0x114>)
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <SetSysClock+0x114>)
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800115e:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <SetSysClock+0x11c>)
 8001162:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001166:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001168:	bf00      	nop
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <SetSysClock+0x11c>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f9      	bne.n	800116a <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001176:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <SetSysClock+0x114>)
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <SetSysClock+0x114>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800117e:	4a1c      	ldr	r2, [pc, #112]	; (80011f0 <SetSysClock+0x114>)
 8001180:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <SetSysClock+0x114>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001186:	4a1a      	ldr	r2, [pc, #104]	; (80011f0 <SetSysClock+0x114>)
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <SetSysClock+0x114>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800118e:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <SetSysClock+0x114>)
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <SetSysClock+0x114>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001198:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800119a:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <SetSysClock+0x114>)
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <SetSysClock+0x114>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 80011a4:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <SetSysClock+0x114>)
 80011a8:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <SetSysClock+0x114>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011b0:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011b2:	bf00      	nop
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <SetSysClock+0x114>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0f9      	beq.n	80011b4 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011c0:	4a0b      	ldr	r2, [pc, #44]	; (80011f0 <SetSysClock+0x114>)
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <SetSysClock+0x114>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f023 0303 	bic.w	r3, r3, #3
 80011ca:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80011cc:	4a08      	ldr	r2, [pc, #32]	; (80011f0 <SetSysClock+0x114>)
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <SetSysClock+0x114>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f043 0303 	orr.w	r3, r3, #3
 80011d6:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80011d8:	bf00      	nop
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SetSysClock+0x114>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b0c      	cmp	r3, #12
 80011e4:	d1f9      	bne.n	80011da <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40023c00 	.word	0x40023c00
 80011f8:	40007000 	.word	0x40007000

080011fc <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
	int div = 1;
 8001208:	2301      	movs	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800120c:	e004      	b.n	8001218 <ts_itoa+0x1c>
		div *= base;
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	fb02 f303 	mul.w	r3, r2, r3
 8001216:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	429a      	cmp	r2, r3
 8001224:	d2f3      	bcs.n	800120e <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 8001226:	e029      	b.n	800127c <ts_itoa+0x80>
	{
		int num = d/div;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001230:	613b      	str	r3, [r7, #16]
		d = d%div;
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	fbb3 f1f2 	udiv	r1, r3, r2
 800123a:	fb02 f201 	mul.w	r2, r2, r1
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	60bb      	str	r3, [r7, #8]
		div /= base;
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	fb92 f3f3 	sdiv	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	2b09      	cmp	r3, #9
 8001250:	dd0a      	ble.n	8001268 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	1c59      	adds	r1, r3, #1
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	6011      	str	r1, [r2, #0]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	3237      	adds	r2, #55	; 0x37
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	e009      	b.n	800127c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	1c59      	adds	r1, r3, #1
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	6011      	str	r1, [r2, #0]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	3230      	adds	r2, #48	; 0x30
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1d2      	bne.n	8001228 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 8001282:	bf00      	nop
 8001284:	371c      	adds	r7, #28
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800129c:	e07d      	b.n	800139a <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b25      	cmp	r3, #37	; 0x25
 80012a4:	d171      	bne.n	800138a <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3301      	adds	r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b64      	cmp	r3, #100	; 0x64
 80012b2:	d01e      	beq.n	80012f2 <ts_formatstring+0x66>
 80012b4:	2b64      	cmp	r3, #100	; 0x64
 80012b6:	dc06      	bgt.n	80012c6 <ts_formatstring+0x3a>
 80012b8:	2b58      	cmp	r3, #88	; 0x58
 80012ba:	d050      	beq.n	800135e <ts_formatstring+0xd2>
 80012bc:	2b63      	cmp	r3, #99	; 0x63
 80012be:	d00e      	beq.n	80012de <ts_formatstring+0x52>
 80012c0:	2b25      	cmp	r3, #37	; 0x25
 80012c2:	d058      	beq.n	8001376 <ts_formatstring+0xea>
 80012c4:	e05d      	b.n	8001382 <ts_formatstring+0xf6>
 80012c6:	2b73      	cmp	r3, #115	; 0x73
 80012c8:	d02b      	beq.n	8001322 <ts_formatstring+0x96>
 80012ca:	2b73      	cmp	r3, #115	; 0x73
 80012cc:	dc02      	bgt.n	80012d4 <ts_formatstring+0x48>
 80012ce:	2b69      	cmp	r3, #105	; 0x69
 80012d0:	d00f      	beq.n	80012f2 <ts_formatstring+0x66>
 80012d2:	e056      	b.n	8001382 <ts_formatstring+0xf6>
 80012d4:	2b75      	cmp	r3, #117	; 0x75
 80012d6:	d037      	beq.n	8001348 <ts_formatstring+0xbc>
 80012d8:	2b78      	cmp	r3, #120	; 0x78
 80012da:	d040      	beq.n	800135e <ts_formatstring+0xd2>
 80012dc:	e051      	b.n	8001382 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	60fa      	str	r2, [r7, #12]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	1d11      	adds	r1, r2, #4
 80012e8:	6079      	str	r1, [r7, #4]
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	701a      	strb	r2, [r3, #0]
				break;
 80012f0:	e047      	b.n	8001382 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	1d1a      	adds	r2, r3, #4
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	da07      	bge.n	8001312 <ts_formatstring+0x86>
					{
						val *= -1;
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	425b      	negs	r3, r3
 8001306:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60fa      	str	r2, [r7, #12]
 800130e:	222d      	movs	r2, #45	; 0x2d
 8001310:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8001312:	69f9      	ldr	r1, [r7, #28]
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	220a      	movs	r2, #10
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff6e 	bl	80011fc <ts_itoa>
				}
				break;
 8001320:	e02f      	b.n	8001382 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	1d1a      	adds	r2, r3, #4
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800132c:	e007      	b.n	800133e <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	60fa      	str	r2, [r7, #12]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	1c51      	adds	r1, r2, #1
 8001338:	61b9      	str	r1, [r7, #24]
 800133a:	7812      	ldrb	r2, [r2, #0]
 800133c:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f3      	bne.n	800132e <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 8001346:	e01c      	b.n	8001382 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	1d1a      	adds	r2, r3, #4
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	6819      	ldr	r1, [r3, #0]
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	220a      	movs	r2, #10
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff50 	bl	80011fc <ts_itoa>
				break;
 800135c:	e011      	b.n	8001382 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	1d1a      	adds	r2, r3, #4
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4619      	mov	r1, r3
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2210      	movs	r2, #16
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff44 	bl	80011fc <ts_itoa>
				break;
 8001374:	e005      	b.n	8001382 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	60fa      	str	r2, [r7, #12]
 800137c:	2225      	movs	r2, #37	; 0x25
 800137e:	701a      	strb	r2, [r3, #0]
				  break;
 8001380:	bf00      	nop
			}
			fmt++;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	3301      	adds	r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	e007      	b.n	800139a <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	60fa      	str	r2, [r7, #12]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	1c51      	adds	r1, r2, #1
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	7812      	ldrb	r2, [r2, #0]
 8001398:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f47f af7d 	bne.w	800129e <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	461a      	mov	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	1ad3      	subs	r3, r2, r3
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3720      	adds	r7, #32
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop

080013bc <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 80013bc:	b40e      	push	{r1, r2, r3}
 80013be:	b580      	push	{r7, lr}
 80013c0:	b085      	sub	sp, #20
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80013cc:	68ba      	ldr	r2, [r7, #8]
 80013ce:	69f9      	ldr	r1, [r7, #28]
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff5b 	bl	800128c <ts_formatstring>
 80013d6:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80013d8:	68fb      	ldr	r3, [r7, #12]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e4:	b003      	add	sp, #12
 80013e6:	4770      	bx	lr

080013e8 <__libc_init_array>:
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <__libc_init_array+0x3c>)
 80013ea:	b570      	push	{r4, r5, r6, lr}
 80013ec:	461e      	mov	r6, r3
 80013ee:	4c0e      	ldr	r4, [pc, #56]	; (8001428 <__libc_init_array+0x40>)
 80013f0:	2500      	movs	r5, #0
 80013f2:	1ae4      	subs	r4, r4, r3
 80013f4:	10a4      	asrs	r4, r4, #2
 80013f6:	42a5      	cmp	r5, r4
 80013f8:	d004      	beq.n	8001404 <__libc_init_array+0x1c>
 80013fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013fe:	4798      	blx	r3
 8001400:	3501      	adds	r5, #1
 8001402:	e7f8      	b.n	80013f6 <__libc_init_array+0xe>
 8001404:	f000 f816 	bl	8001434 <_init>
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <__libc_init_array+0x44>)
 800140a:	4c09      	ldr	r4, [pc, #36]	; (8001430 <__libc_init_array+0x48>)
 800140c:	461e      	mov	r6, r3
 800140e:	1ae4      	subs	r4, r4, r3
 8001410:	10a4      	asrs	r4, r4, #2
 8001412:	2500      	movs	r5, #0
 8001414:	42a5      	cmp	r5, r4
 8001416:	d004      	beq.n	8001422 <__libc_init_array+0x3a>
 8001418:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800141c:	4798      	blx	r3
 800141e:	3501      	adds	r5, #1
 8001420:	e7f8      	b.n	8001414 <__libc_init_array+0x2c>
 8001422:	bd70      	pop	{r4, r5, r6, pc}
 8001424:	08001460 	.word	0x08001460
 8001428:	08001460 	.word	0x08001460
 800142c:	08001460 	.word	0x08001460
 8001430:	08001464 	.word	0x08001464

08001434 <_init>:
 8001434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001436:	bf00      	nop
 8001438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800143a:	bc08      	pop	{r3}
 800143c:	469e      	mov	lr, r3
 800143e:	4770      	bx	lr

08001440 <_fini>:
 8001440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001442:	bf00      	nop
 8001444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001446:	bc08      	pop	{r3}
 8001448:	469e      	mov	lr, r3
 800144a:	4770      	bx	lr
